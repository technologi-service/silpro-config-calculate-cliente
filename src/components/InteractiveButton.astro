---
// src/components/InteractiveButton.astro
export interface Props {
	message: string;
}

const { message } = Astro.props;
import '../styles/global.css';
---




<div class="flex flex-col items-center justify-center p-8 bg-gray-50 rounded-xl shadow-md max-w-md mx-auto mt-8">
	<h3 class="mb-2 text-blue-600 text-xl font-semibold">Componente Interactivo</h3>
	<p class="mb-5 text-gray-700">Haz clic en el botón para recalcular datos.</p>
	<button
		id="my-button"
		class="px-6 py-3 bg-gradient-to-r from-blue-600 to-cyan-400 text-white rounded-lg text-base font-medium shadow hover:from-blue-700 hover:to-cyan-500 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
	>
		Recalcular datos
	</button>
</div>


<script define:vars={{ message }}>
	// Esta función contiene la lógica que queremos ejecutar.
	function setupButton() {
		const url = import.meta.env.WEB_HOOK_URL;
		fetch(url, { method: 'GET' })
			.then(res => {
				if (!res.ok) throw new Error('Error al llamar el webhook');
				return res.text();
			})
			.then(() => {
				alert('¡Webhook llamado exitosamente!');
			})
			.catch(err => {
				alert('Error: ' + (err instanceof Error ? err.message : err));
			});
	}

		// Asignar el evento click al botón cuando la página esté lista
		document.addEventListener('astro:page-load', () => {
			const button = document.getElementById('my-button');
			if (button) {
				button.addEventListener('click', setupButton);
			}
		});
</script>
