---
import prisma from '../../db/prisma';

const clientesDeseados = [
  "SC2021", "SC1144", "SM1246", "SC1183", "SC0041", "SC0003", "SC0050",
  "SV0001", "SV0014", "SV0091", "SC0004", "SC0035", "SC0007", "SC0014",
  "SC0030", "SC0033", "SC0153", "SC0185", "SC1173", "SC0026", "SC0027",
];

// 1. Consulta la información única de cada cliente.
// Usamos 'distinct' por si un cliente tiene múltiples entradas en la tabla,
// asegurando que obtenemos cada uno solo una vez.
const clientesInfo = await prisma.puntuaciones_clientes_vcs.findMany({
  where: {
    id_cliente: { in: clientesDeseados }
  },
  select: {
    id_cliente: true,
    nombre_empresa: true,
    segmento_categorico: true
  },
  distinct: ['id_cliente'] // Buena práctica para obtener clientes únicos
});

// 2. Agrupa y suma las compras por cliente para el periodo Enero-Julio 2025.
// Usamos 'equals' para el año, es más directo.
const comprasPorCliente = await prisma.puntuaciones_clientes_vcs.groupBy({
  by: ['id_cliente'],
  where: {
    id_cliente: { in: clientesDeseados },
    mes: { gte: '01', lte: '07' },
    ano: { equals: 2025 }
  },
  _sum: {
    volumen_total: true
  }
});

// 3. ✨ CÁLCULO DEL TOTAL GENERAL ✨
// Sumamos el volumen de todos los clientes obtenidos en el paso anterior.
const volumenTotalPeriodo = comprasPorCliente.reduce((total, grupo) => {
  return total + (grupo._sum.volumen_total ?? 0);
}, 0);

// 4. Prepara los datos para un acceso rápido en el frontend.
const datosClientes = new Map(clientesInfo.map(c => [c.id_cliente, { nombre: c.nombre_empresa, segmento: c.segmento_categorico }]));
const sumaCompras = new Map(comprasPorCliente.map(c => [c.id_cliente, c._sum.volumen_total ?? 0]));

// Ahora pasas `clientesDeseados`, `datosClientes`, `sumaCompras` y `volumenTotalPeriodo` a tu componente.
---

<section class="min-h-screen flex flex-col items-center bg-gradient-to-br from-yellow-100 to-orange-100 py-10 px-4">
  <h2 class="text-3xl font-extrabold text-orange-700 mb-6 text-center">
    Análisis de clientes GIGANTES
  </h2>

  {/* Tarjeta de Resumen con el Volumen Total */}
  <div class="w-full max-w-3xl bg-orange-600 text-white rounded-xl shadow-lg p-6 mb-8 text-center">
    <h3 class="text-lg font-semibold uppercase tracking-wider text-orange-100">
      Volumen Total (Ene-Jul 2025)
    </h3>
    <p class="text-4xl font-bold mt-2">
      {new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(volumenTotalPeriodo)}
    </p>
  </div>

  {/* Lista Detallada de Clientes */}
  <div class="w-full max-w-3xl bg-white rounded-2xl shadow-xl p-8">
    {clientesDeseados.length === 0 ? (
      <p class="text-center text-gray-500">No hay clientes para mostrar.</p>
    ) : (
      <ul class="divide-y divide-orange-100">
        {clientesDeseados.map(id => {
          const cliente = datosClientes.get(id);
          const compras = sumaCompras.get(id) ?? 0;
          return (
            <>
              <li class="py-4 flex flex-wrap items-center justify-between gap-x-4 gap-y-2">
                <div class="flex flex-col">
                  <span class="font-bold text-orange-600 text-lg">{id}</span>
                  <span class="text-gray-700 text-sm">
                    {cliente?.nombre ?? 'Cliente no encontrado'}
                  </span>
                </div>
                <div class="flex items-center gap-2">
                  {cliente ? (
                    <>
                      <span class="px-3 py-1 rounded-full bg-orange-100 text-orange-800 text-xs font-semibold">
                        {cliente.segmento ?? 'N/A'}
                      </span>
                      <span class="px-3 py-1 rounded-full bg-green-100 text-green-800 text-xs font-semibold w-40 text-right">
                        {new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN' }).format(compras)}
                      </span>
                    </>
                  ) : (
                    <span class="px-3 py-1 rounded-full bg-red-100 text-red-800 text-xs font-semibold">
                      Sin registro en BD
                    </span>
                  )}
                </div>
              </li>
            </>
          );
        })}
      </ul>
    )}
  </div>
</section>
