generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model catalogo_segmentos_vcs {
  id                Int     @id @default(autoincrement())
  segmento_numerico Int     @unique
  nombre_categoria  String
  estrellas         Int
  score_min         Decimal @db.Decimal(3, 1)
  score_max         Decimal @db.Decimal(3, 1)
}

model clientes {
  id                    Int                 @id @default(autoincrement())
  cliente_id            String              @unique
  nombre_empresa        String?
  segmento_anterior     String?
  segmento_actual       String?
  score_numerico_actual Decimal?            @db.Decimal
  volumen_facturacion   Float?
  margen_total          Float?
  recency               Int?
  frecuencia            Int?
  segmento_numerico     Decimal?            @db.Decimal
  facturas_clientes     facturas_clientes[]
}

model data_entrada_tubos_paris {
  id               BigInt  @id @default(autoincrement())
  cliente_id       Int
  mes              Int
  ano              Int
  recencia         Int
  volumen_total    Decimal @db.Decimal(18, 2)
  frecuencia_total Int
  margen_promedio  Decimal @db.Decimal(18, 4)

  @@unique([cliente_id, mes, ano])
}

model facturas {
  id           Int       @id(map: "agen_pkey") @default(autoincrement())
  cliente_id   String?
  fecha_compra DateTime? @default(now()) @db.Timestamp(6)
  mes          Int?
  ano          Int?
  volumen      Decimal?  @db.Decimal
  frecuencia   Int?
  recencia     Int?
  margen       Decimal?  @db.Decimal
  portes       Decimal?  @db.Decimal
  impago       String?

  @@index([cliente_id, fecha_compra(sort: Desc)], map: "idx_facturas_cliente_fecha")
}

model facturas_clientes {
  id           Int       @id(map: "facturas_pkey") @default(autoincrement())
  cliente_id   String?
  fecha_compra DateTime? @default(now()) @db.Timestamp(6)
  mes          Int?
  ano          Int?
  volumen      Decimal?  @db.Decimal
  frecuencia   Int?
  recencia     Int?
  margen       Decimal?  @db.Decimal
  portes       Decimal?  @db.Decimal
  impago       String?
  clientes     clientes? @relation(fields: [cliente_id], references: [cliente_id], onDelete: Restrict, map: "facturas_cliente_id_fkey")
}

model puntuaciones_clientes {
  id                    Int      @id @default(autoincrement())
  id_cliente            Int?     @unique(map: "unique_id_cliente")
  nombre_empresa        String?
  recency               Int?
  frecuencia            Int?
  ano                   Int?
  mes                   Int?
  puntuacion_volumen    Int?
  puntuacion_margen     Int?
  puntuacion_recency    Int?
  puntuacion_frecuencia Int?
  ponderacion_vcs       Decimal? @db.Decimal(10, 2)
  segmento_numerico     Int?
  segmento_categorico   String?
}

model puntuaciones_clientes_vcs {
  id                    Int      @id @default(autoincrement())
  id_cliente            Int?
  nombre_empresa        String?  @default("nombre de la empresa")
  volumen_total         Float?
  margen_promedio       Float?
  recency               BigInt?
  frecuencia            BigInt?
  ano                   Decimal? @db.Decimal
  mes                   Decimal? @db.Decimal
  puntuacion_volumen    Int?
  puntuacion_margen     Int?
  puntuacion_recency    Int?
  puntuacion_frecuencia Int?
  ponderacion_vcs       Decimal? @db.Decimal(10, 2)
  segmento_numerico     Int?
  segmento_categorico   String?
}

model rangos {
  id         Int    @id @default(autoincrement())
  nombre     String @db.VarChar(255)
  min_valor  Int
  max_valor  Int
  puntuacion Int?
}

model variable {
  id     Int     @id @default(autoincrement())
  nombre String? @db.VarChar(255)
  peso   Float?
}

enum VariablesVcs {
  VOLUMEN
  FRECUENCIA
  RECENCIA
  MARGEN
  PORTES
  IMPAGO
}
